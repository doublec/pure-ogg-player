/* /usr/include/vorbis/codec.h: */
using "lib:libvorbis";

namespace vorbis;
const vorbis::OV_FALSE = -1;
const vorbis::OV_EOF = -2;
const vorbis::OV_HOLE = -3;
const vorbis::OV_EREAD = -128;
const vorbis::OV_EFAULT = -129;
const vorbis::OV_EIMPL = -130;
const vorbis::OV_EINVAL = -131;
const vorbis::OV_ENOTVORBIS = -132;
const vorbis::OV_EBADHEADER = -133;
const vorbis::OV_EVERSION = -134;
const vorbis::OV_ENOTAUDIO = -135;
const vorbis::OV_EBADPACKET = -136;
const vorbis::OV_EBADLINK = -137;
const vorbis::OV_ENOSEEK = -138;
extern void vorbis_info_init(vorbis_info*);
extern void vorbis_info_clear(vorbis_info*);
extern int vorbis_info_blocksize(vorbis_info*, int);
extern void vorbis_comment_init(vorbis_comment*);
extern void vorbis_comment_add(vorbis_comment*, char*);
extern void vorbis_comment_add_tag(vorbis_comment*, char*, char*);
extern char* vorbis_comment_query(vorbis_comment*, char*, int);
extern int vorbis_comment_query_count(vorbis_comment*, char*);
extern void vorbis_comment_clear(vorbis_comment*);
extern int vorbis_block_init(vorbis_dsp_state*, vorbis_block*);
extern int vorbis_block_clear(vorbis_block*);
extern void vorbis_dsp_clear(vorbis_dsp_state*);
extern double vorbis_granule_time(vorbis_dsp_state*, int);
extern int vorbis_analysis_init(vorbis_dsp_state*, vorbis_info*);
extern int vorbis_commentheader_out(vorbis_comment*, ogg_packet*);
extern int vorbis_analysis_headerout(vorbis_dsp_state*, vorbis_comment*, ogg_packet*, ogg_packet*, ogg_packet*);
extern float** vorbis_analysis_buffer(vorbis_dsp_state*, int);
extern int vorbis_analysis_wrote(vorbis_dsp_state*, int);
extern int vorbis_analysis_blockout(vorbis_dsp_state*, vorbis_block*);
extern int vorbis_analysis(vorbis_block*, ogg_packet*);
extern int vorbis_bitrate_addblock(vorbis_block*);
extern int vorbis_bitrate_flushpacket(vorbis_dsp_state*, ogg_packet*);
extern int vorbis_synthesis_idheader(ogg_packet*);
extern int vorbis_synthesis_headerin(vorbis_info*, vorbis_comment*, ogg_packet*);
extern int vorbis_synthesis_init(vorbis_dsp_state*, vorbis_info*);
extern int vorbis_synthesis_restart(vorbis_dsp_state*);
extern int vorbis_synthesis(vorbis_block*, ogg_packet*);
extern int vorbis_synthesis_trackonly(vorbis_block*, ogg_packet*);
extern int vorbis_synthesis_blockin(vorbis_dsp_state*, vorbis_block*);
extern int vorbis_synthesis_pcmout(vorbis_dsp_state*, float***);
extern int vorbis_synthesis_lapout(vorbis_dsp_state*, float***);
extern int vorbis_synthesis_read(vorbis_dsp_state*, int);
extern long vorbis_packet_blocksize(vorbis_info*, ogg_packet*);
extern int vorbis_synthesis_halfrate(vorbis_info*, int);
extern int vorbis_synthesis_halfrate_p(vorbis_info*);
using ffi, system, ogg;
using namespace ogg, vorbis;

let vorbis::vorbis_block_t = struct_t (pointer_t,        //  float  **pcm;
                                       oggpack_buffer_t, // opb;
                                       slong_t,          // long  lW;
                                       slong_t,          // long  W;
                                       slong_t,          // long  nW;
                                       sint_t,           // int   pcmend;
                                       sint_t,           // int   mode;
                                       sint_t,           // int         eofflag;
                                       sint64_t,         // ogg_int64_t granulepos;
                                       sint64_t,         // ogg_int64_t sequence;
                                       pointer_t,        // vorbis_dsp_state *vd;
                                       pointer_t,        // void               *localstore;
                                       slong_t,          // long                localtop;
                                       slong_t,          // long                localalloc;
                                       slong_t,          // long                totaluse;
                                       pointer_t);       // struct alloc_chain *reap;

vorbis::make_vorbis_block = cooked (malloc 108);
vorbis::make_vorbis_dsp_state = cooked (malloc 104);

let vorbis::vorbis_info_t = struct_t (sint_t,     // int version;
                                      sint_t,     // int channels;
                                      slong_t,    // long rate;
                                      slong_t,    // long bitrate_upper;
                                      slong_t,    // long bitrate_nominal;
                                      slong_t,    // long bitrate_lower;
                                      slong_t,    // long bitrate_window;
                                      pointer_t); // void *codec_setup;

vorbis::make_vorbis_info = struct vorbis_info_t (0,0,0,0,0,0,0,NULL);

let vorbis::vorbis_comment_t = struct_t (pointer_t,   //  char **user_comments;
                                         pointer_t,   //  int   *comment_lengths;
                                         sint_t,      //  int    comments;
                                         string_t);   // char  *vendor;

vorbis::make_vorbis_comment = struct vorbis_comment_t (NULL, NULL, 0, "");

vorbis::vorbis_commentheader_out comment packet::ogg_packet = vorbis_commentheader_out comment (raw_packet packet);
vorbis::vorbis_synthesis_idheader packet::ogg_packet = vorbis_synthesis_idheader (raw_packet packet);
vorbis::vorbis_synthesis_headerin info comment packet::ogg_packet = vorbis_synthesis_headerin info comment (raw_packet packet);
vorbis::vorbis_synthesis block packet::ogg_packet = vorbis_synthesis block (raw_packet packet);
vorbis::vorbis_synthesis_trackonly block packet::ogg_packet = vorbis_synthesis_trackonly block (raw_packet packet);
vorbis::vorbis_packet_blocksize info packet::ogg_packet = vorbis_packet_blocksize info (raw_packet packet);

